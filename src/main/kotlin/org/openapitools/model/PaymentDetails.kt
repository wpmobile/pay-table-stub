package org.openapitools.model

import java.util.Objects
import com.fasterxml.jackson.annotation.JsonProperty
import org.openapitools.model.Merchant
import org.openapitools.model.PaymentDetailsPaymentInstrument
import org.openapitools.model.PaymentDetailsValue
import org.openapitools.model.PaymentResultType
import org.openapitools.model.Paypoint
import org.openapitools.model.TransactionResultCode
import javax.validation.constraints.DecimalMax
import javax.validation.constraints.DecimalMin
import javax.validation.constraints.Email
import javax.validation.constraints.Max
import javax.validation.constraints.Min
import javax.validation.constraints.NotNull
import javax.validation.constraints.Pattern
import javax.validation.constraints.Size
import javax.validation.Valid
import io.swagger.v3.oas.annotations.media.Schema

/**
 * Full details of a completed payment. 
 * @param paymentType 
 * @param transactionDateTime The date-time at which the transaction was processed. Represented as a date-time according to RFC 3339, section 5.6, including the relevant time zone. 
 * @param result 
 * @param merchantTransactionReference The transaction reference defined by the merchant to uniquely identify the payment. Must contain only alpha numeric, hypen (-) and underscore (_) characters. 
 * @param merchant 
 * @param paypoint 
 * @param &#x60;value&#x60; 
 * @param gatewayTransactionReference The transaction reference generated by the payment gateway to uniquely identify the payment. This will be available for any payment which has been processed online. 
 * @param eftSequenceNumber The transaction sequence number. 
 * @param retrievalReferenceNumber The retrieval reference number for the transaction. 
 * @param receiptNumber The number of the receipt to be issued. 
 * @param receiptRetentionReminder Text that can be displayed on a receipt. 
 * @param receiptCustomerDeclaration Text that can be displayed on a receipt. 
 * @param taxFreeVoucher Base64 representation of the UTF-8 encoded content of the voucher. The first 2 characters of each line a print command, followed by the text to print. The print commands are: * `01` - *Print the Premier taxfree logo bitmap* * `02` - *Print large bold text, followed by a carriage return* * `03` - *Print large underlined text, followed by a carriage return* * `04` - *Print normal underlined text, followed by a carriage return* * `05` - *Print normal text, followed by a carriage return* * `06` - *Print normal sized bold text, followed by a carriage return* * `07` - *Print normal sized wide text, followed by a carriage return* * `08` - *Print normal right aligned text, followed by a carriage return* * `09` - *Print normal centre aligned text, followed by a carriage return* * `10` - *Print large bold centered text, followed by a carriage return* * `11` - *Print the data as a 'Interleaved 2 of 5' barcode* * `12` - *Print carriage return* * `13` - *Auto cut paper* * `50` - *Load another voucher* * `51` - *Print copy* * `61` - *The remainder of the text after the print code is encrypted and   base64 encoded. Decrypt it and then print normal text, followed by a carriage return* 
 * @param paymentInstrument 
 */
data class PaymentDetails(

    @field:Valid
    @Schema(example = "null", required = true, description = "")
    @field:JsonProperty("paymentType", required = true) val paymentType: PaymentResultType,

    @Schema(example = "null", required = true, description = "The date-time at which the transaction was processed. Represented as a date-time according to RFC 3339, section 5.6, including the relevant time zone. ")
    @field:JsonProperty("transactionDateTime", required = true) val transactionDateTime: java.time.OffsetDateTime,

    @field:Valid
    @Schema(example = "null", required = true, description = "")
    @field:JsonProperty("result", required = true) val result: TransactionResultCode,

    @get:Pattern(regexp="^[a-zA-Z0-9_\\\\-]{1,30}$")
    @get:Size(min=1,max=30)
    @Schema(example = "MS_123-A54B3DF", required = true, description = "The transaction reference defined by the merchant to uniquely identify the payment. Must contain only alpha numeric, hypen (-) and underscore (_) characters. ")
    @field:JsonProperty("merchantTransactionReference", required = true) val merchantTransactionReference: kotlin.String,

    @field:Valid
    @Schema(example = "null", description = "")
    @field:JsonProperty("merchant") val merchant: Merchant? = null,

    @field:Valid
    @Schema(example = "null", description = "")
    @field:JsonProperty("paypoint") val paypoint: Paypoint? = null,

    @field:Valid
    @Schema(example = "null", description = "")
    @field:JsonProperty("value") val `value`: PaymentDetailsValue? = null,

    @get:Pattern(regexp="^[a-zA-Z0-9]{12,22}$")
    @get:Size(min=12,max=22)
    @Schema(example = "1234567890AB", description = "The transaction reference generated by the payment gateway to uniquely identify the payment. This will be available for any payment which has been processed online. ")
    @field:JsonProperty("gatewayTransactionReference") val gatewayTransactionReference: kotlin.String? = null,

    @get:Min(1L)
    @Schema(example = "null", description = "The transaction sequence number. ")
    @field:JsonProperty("eftSequenceNumber") val eftSequenceNumber: kotlin.Long? = null,

    @get:Min(1L)
    @get:Max(9999999999L)
    @Schema(example = "null", description = "The retrieval reference number for the transaction. ")
    @field:JsonProperty("retrievalReferenceNumber") val retrievalReferenceNumber: kotlin.Long? = null,

    @get:Min(1L)
    @get:Max(9999999999L)
    @Schema(example = "null", description = "The number of the receipt to be issued. ")
    @field:JsonProperty("receiptNumber") val receiptNumber: kotlin.Long? = null,

    @get:Size(min=1,max=50)
    @Schema(example = "null", description = "Text that can be displayed on a receipt. ")
    @field:JsonProperty("receiptRetentionReminder") val receiptRetentionReminder: kotlin.String? = null,

    @get:Size(min=1,max=50)
    @Schema(example = "null", description = "Text that can be displayed on a receipt. ")
    @field:JsonProperty("receiptCustomerDeclaration") val receiptCustomerDeclaration: kotlin.String? = null,

    @Schema(example = "MDEKMDJWT1VDSEVSCjEyCjA2RVhBTVBMRSBDT05URU5UCjEz", description = "Base64 representation of the UTF-8 encoded content of the voucher. The first 2 characters of each line a print command, followed by the text to print. The print commands are: * `01` - *Print the Premier taxfree logo bitmap* * `02` - *Print large bold text, followed by a carriage return* * `03` - *Print large underlined text, followed by a carriage return* * `04` - *Print normal underlined text, followed by a carriage return* * `05` - *Print normal text, followed by a carriage return* * `06` - *Print normal sized bold text, followed by a carriage return* * `07` - *Print normal sized wide text, followed by a carriage return* * `08` - *Print normal right aligned text, followed by a carriage return* * `09` - *Print normal centre aligned text, followed by a carriage return* * `10` - *Print large bold centered text, followed by a carriage return* * `11` - *Print the data as a 'Interleaved 2 of 5' barcode* * `12` - *Print carriage return* * `13` - *Auto cut paper* * `50` - *Load another voucher* * `51` - *Print copy* * `61` - *The remainder of the text after the print code is encrypted and   base64 encoded. Decrypt it and then print normal text, followed by a carriage return* ")
    @field:JsonProperty("taxFreeVoucher") val taxFreeVoucher: kotlin.String? = null,

    @field:Valid
    @Schema(example = "null", description = "")
    @field:JsonProperty("paymentInstrument") val paymentInstrument: PaymentDetailsPaymentInstrument? = null
) {

}

