package org.openapitools.model

import java.util.Objects
import com.fasterxml.jackson.annotation.JsonProperty
import com.fasterxml.jackson.annotation.JsonValue
import javax.validation.constraints.DecimalMax
import javax.validation.constraints.DecimalMin
import javax.validation.constraints.Email
import javax.validation.constraints.Max
import javax.validation.constraints.Min
import javax.validation.constraints.NotNull
import javax.validation.constraints.Pattern
import javax.validation.constraints.Size
import javax.validation.Valid
import io.swagger.v3.oas.annotations.media.Schema

/**
 * Details for a Alipay barcode payment instrument. This payment instrument is supported for `sale` and `refund` payment types. 
 * @param type The type of payment instrument. This will also dictate which other payment instrument fields are required to fulfil the payment. 
 * @param barcode The barcode value generated by the customer's Alipay app and scanned by the merchant. 
 */
data class PaymentInstrumentOutputAlipayBarcode(

    @Schema(example = "null", required = true, description = "The type of payment instrument. This will also dictate which other payment instrument fields are required to fulfil the payment. ")
    @field:JsonProperty("type", required = true) val type: PaymentInstrumentOutputAlipayBarcode.Type,

    @get:Pattern(regexp="^[0-9]{16,24}$")
    @get:Size(min=16,max=24)
    @Schema(example = "123456781234567812345678", required = true, description = "The barcode value generated by the customer's Alipay app and scanned by the merchant. ")
    @field:JsonProperty("barcode", required = true) val barcode: kotlin.String
) {

    /**
    * The type of payment instrument. This will also dictate which other payment instrument fields are required to fulfil the payment. 
    * Values: alipaySlashBarcode
    */
    enum class Type(val value: kotlin.String) {

        @JsonProperty("alipay/barcode") alipaySlashBarcode("alipay/barcode")
    }

}

